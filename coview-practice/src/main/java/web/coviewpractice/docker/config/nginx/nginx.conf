
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    server_names_hash_bucket_size 64;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    # http {
    #     map $arg_server $backend {
    #         1 192.168.0.137:8001;
    #         2 192.168.0.137:8002;
    #         # 다른 조건 및 백엔드 서버들을 여기에 추가
    #     }

    #     server {
    #         listen 80;

    #         location /stomp/media {
    #             proxy_pass http://$backend;
    #             proxy_http_version 1.1;
    #             proxy_set_header Upgrade $http_upgrade;
    #             proxy_set_header Connection "Upgrade";
    #         }

    #         # 다른 location 블록 및 설정들...
    #     }
    # }

    upstream call {
        least_conn;    
        server 192.168.0.137:1234; 
        # server livekit2:7880; 
        # server livekit3:7880; 
    }

    upstream signal {
        least_conn;    
        server 192.168.0.137:1235; 
        # server livekit2:5349; 
        # server livekit3:5349; 
    }

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }

    # server {
    #     listen 443 ssl;
    #     server_name example.com; # 도메인으로 변경
    #     server_tokens off;

    #     ssl_certificate             /etc/nginx/cert/_example_com.crt;
    #     ssl_certificate_key         /etc/nginx/cert/_example_com.key;

    #     location / {
    #         root   html;
    #         index  index.html index.htm;
    #     }
    # }

    server {
        listen 443 ssl;
        server_name example.com;

        ssl_certificate             /etc/nginx/cert/_example_com.crt;
        ssl_certificate_key         /etc/nginx/cert/_example_com.key;
        server_tokens off;

        location /call {
            proxy_set_header        Host $host;
            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        X-Forwarded-Proto $scheme;

            rewrite ^/call(/.*)$ $1 break;
            proxy_pass              http://call;

            proxy_http_version      1.1;
            proxy_set_header        Upgrade $http_upgrade;
            proxy_set_header        Connection "Upgrade";
            proxy_read_timeout      90;

            proxy_redirect          http://call https://example.com/call;
        }

        
        location /signal {
            proxy_set_header        Host $host;
            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        X-Forwarded-Proto $scheme;

            rewrite ^/signal(/.*)$ $1 break;
            proxy_pass              http://signal;

            proxy_http_version      1.1;
            proxy_set_header        Upgrade $http_upgrade;
            proxy_set_header        Connection "Upgrade";
            proxy_read_timeout      90;

            proxy_redirect          https://signal https://example.com/signal;
        }
    }

    server {
        listen 443 ssl;
        server_name signal.example.com; # 도메인으로 변경
        server_tokens off;

        ssl_certificate             /etc/nginx/cert/_example_com.crt;
        ssl_certificate_key         /etc/nginx/cert/_example_com.key;

        # access_log                  /var/log/nginx/livekit-turn/access.log;
        # error_log                   /var/log/nginx/livekit-turn/error.log;

        location / {
            proxy_set_header        Host $host;
            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        X-Forwarded-Proto $scheme;

            proxy_pass              http://signal;

            proxy_http_version      1.1;
            proxy_set_header        Upgrade $http_upgrade;
            proxy_set_header        Connection "Upgrade";
            proxy_read_timeout      90;

            proxy_redirect          https://signal https://signal.example.com;
        }

    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
